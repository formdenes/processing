class Vein {
  ArrayList<Node> nodes;

  Vein(Node node) {
		nodes = new ArrayList<Node>();
    nodes.add(node);
	}

  void addNode(Node node){
    nodes.add(node);
  }

  Node getNode(int index){
    return nodes.get(index);
  }

  void show(color col, float size){
    show(col, size, false);
  }

  void show(color col, float size, boolean showNode) {
    for (int i = 0; i < nodes.size(); i++){
      Node node = nodes.get(i);
      if(showNode) {node.show(col, size);}
      if (i >= 1) {
        Node prevNode = nodes.get(i-1);
	    	line(node.pos.x, node.pos.y, prevNode.pos.x, prevNode.pos.y);
			}
    }
  }

  int size(){
    return nodes.size();
  }

  void norm(){
    for (int i = 0; i < nodes.size(); i++){
      Node node = nodes.get(i);
      node.norm();
    }
  }

  void calcMasses(){
    for (int i = 0; i < nodes.size(); i++){
      Node node = nodes.get(i);
      node.calcMass();
    }
  }

  void showSources(color col){
    for (int i = 0; i < nodes.size(); i++){
      Node node = nodes.get(i);
      node.showSources(col);
    }
  }
  void showNorms(color col){
    for (int i = 0; i < nodes.size(); i++){
      Node node = nodes.get(i);
      node.showNorms(col);
    }
  }
  void showMasses(color col){
    for (int i = 0; i < nodes.size(); i++){
      Node node = nodes.get(i);
      node.showMass(col);
    }
  }

  void addNodes(){
    int size = size();
    for(int i = 0; i < size; i++){
      Node node = nodes.get(i);
      PVector pos = node.pos;
      PVector mass = node.mass;
      if(!(mass.x == 0 && mass.y == 0)){
        nodes.add(new Node(pos.x + mass.x * nodeSize, pos.y + mass.y * nodeSize));
      }
    }
  }
}
