ArrayList<PVector> sources = new ArrayList<PVector>();
ArrayList<ArrayList<PVector>> fractures = new ArrayList<ArrayList<PVector>>();
// ArrayList<PVector> fracture = new ArrayList<PVector>();
ArrayList<PVector> masses = new ArrayList<PVector>();
ArrayList<Integer> massCounters = new ArrayList<int>();
int sourceSize = 10000;
int step = 5;
int FOW = 100;


void setup(){
  size(1000,1000);
  sources = generateSources(sources);
  ArrayList<PVector> fracture1 = new ArrayList<PVector>();
  ArrayList<PVector> fracture2 = new ArrayList<PVector>();
  ArrayList<PVector> fracture3 = new ArrayList<PVector>();
  ArrayList<PVector> fracture4 = new ArrayList<PVector>();
  fracture1.add(new PVector(width/2, height-50));
  fracture2.add(new PVector(width/2, 50));
  fracture3.add(new PVector(width-50, height/2));
  fracture4.add(new PVector(50, height/2));
  fractures.add(fracture1);
  fractures.add(fracture2);
  fractures.add(fracture3);
  fractures.add(fracture4);
  for(int i = 0; i < fractures.size(); i++){
    masses.add(new PVector());
  }
  frameRate(10);
}

void draw(){
  sources = generateSources(sources);
  background(230);
  PVector mass = new PVector(0,0);
  int massCount = 0;
  for(int i = 0; i < sources.size(); i++){
    PVector source = sources.get(i);
    fill(255, 0, 0);
    noStroke();
    circle(source.x, source.y, 2);
    for(int j = 0; j < fractures.size(); j++){
      ArrayList<PVector> fracture = fractures.get(j);
      PVector node = fracture.get(fracture.size() -1);
      float _dist = dist(node.x, node.y, source.x, source.y);
      if(_dist <= FOW){
        mass.x += source.x;
        mass.y += source.y;
        massCount++;
        sources.remove(i);
      }
    }
  }
  mass.x = mass.x / massCount;
  mass.y = mass.y / massCount;
  stroke(0, 0, 255);
  strokeWeight(3);
  noFill();
  circle(mass.x, mass.y, 10);
  for(int j = 0; j < fractures.size(); j++){
  beginShape();
    ArrayList<PVector> fracture = fractures.get(j);
    for(int i = 0; i < fracture.size(); i++){
      PVector node = fracture.get(i);
      stroke(0, 0, 0);
      strokeWeight(3);
      noFill();
      // circle(node.x, node.y, step);
      vertex(node.x, node.y);
      if (i == fracture.size()-1){
        strokeWeight(1);
        circle(node.x, node.y, FOW * 2);
        float xdist = mass.x - node.x;
        float ydist = mass.y - node.y;
        float nxdist = xdist / sqrt(xdist * xdist + ydist * ydist) * step;
        float nydist = ydist / sqrt(xdist * xdist + ydist * ydist) * step;
        // println(nxdist, nydist);
        PVector nNode = new PVector(node.x + nxdist, node.y + nydist); //<>//
        fracture.add(nNode); //<>//
        break; //<>//
      }
    }
    endShape(OPEN);
  }
  println(frameRate); //<>//
  // noLoop(); //<>//
}


ArrayList<PVector> generateSources(ArrayList<PVector> sources){
  while(sources.size() < sourceSize){
    PVector source = new PVector(random(0, width), random(0, width));
    sources.add(source);
  }
  return sources;
}
